name: CI/CD Pipeline

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: ["**"]
  pull_request:
    branches: [main]
  repository_dispatch:

jobs:
  ci-verify-lint-prettier-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18.x"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run prettier command
        run: npm run prettier
        
      - name: Run lint command
        run: npm run lint

      - name: Run test command
        run: npm run test

  cd-build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [ci-verify-lint-prettier-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18.x"
      
      - name: Cache dependencies and build artifacts
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            .next/cache
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install dependencies (if not cached)
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run build & export command (if not cached)
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm run build

  merge_check:
    runs-on: ubuntu-latest
    needs: [cd-build]

    steps:
      - name: Check Job Status
        id: job_status
        run: echo "All jobs are successful"

  deploy:
    if: github.event_name == 'pull_request'
    name: Deploy
    needs: [cd-build]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Install Dependencies (if not cached)
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run build & export command (if not cached)
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm run build

      - name: Link Netlify Site
        id: link_site
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: npx netlify-cli link --auth $NETLIFY_AUTH_TOKEN

      - name: Netlify Deploy
        if: steps.link_site.outcome == 'success'
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: npx netlify-cli deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN --prod